// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
   // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  CUSTOMER
}

enum PaymentStatus {
  PAID
  UNPAID
  PENDING
  PARTIALLY_PAID
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  password      String?
  role          UserRole      @default(USER)
  companyName   String?
  accounts      Account[]

  customers     UserCustomer[] // Updated to reference the junction table for many-to-many
  invoices      Invoice[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  @@unique([email, token])
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  companyName String?
  email       String
  phone       String?
  address     String?
  invoices    Invoice[]
  users       UserCustomer[] // Updated to reference the connection table for many-to-many

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customers")
}

model Invoice {
  id                 String        @id @default(cuid())
  invoiceNumber      String        @unique
  invoiceDate        DateTime
  dueDate            DateTime
  customerId         String?       // Nullable customerId
  userId             String
  description        String?
  items              InvoiceItem[]
  currency           String        @default("USD")
  tax                Float         @default(0)
  discount           Float         @default(0)
  subtotal           Float         @default(0)
  total              Float         @default(0)
  taxAmount          Float         @default(0)
  discountAmount     Float         @default(0)
  currencySymbol     String        @default("$")

  paymentStatus      PaymentStatus @default(UNPAID)
  userName           String?
  userCompanyName    String?
  userEmail          String?

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt

  customer           Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull) // SetNull to keep invoices
  user               User          @relation(fields: [userId], references: [id])

  // Redundant fields to store customer info
  customerName        String?
  customerCompanyName String?
  customerPhone       String?
  customerEmail       String?
  customerAddress     String?

  Payment Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  itemName    String
  quantity    Int
  unitPrice   Float
  tax         Float    @default(0) // tax percentage
  totalTax    Float    @default(0) // tax amount
  total       Float    @default(0)

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id           String        @id @default(cuid())
  paymentNumber    String        @unique @default(cuid())
  invoiceId    String
  totalAmount       Float
  amountPaid       Float
  leftToPay        Float    @default(0)
  method       String       @default("card")
  status       PaymentStatus @default(PENDING)
  paymentDate  DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  invoice      Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Redundant fields to store customer info
  customerName        String?
  customerCompanyName String?
  customerPhone       String?
  customerEmail       String?
  customerAddress     String?

  @@map("payments")
}

// Connection table to handle the many-to-many relationship between Users and Customers
model UserCustomer {
  userId     String
  customerId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@id([userId, customerId]) 
  @@map("user_customers")
}
